const express = require('express');
const axios = require('axios');
const router = express.Router();

// Gemini-backed text generation for social captions
router.post('/generate-text', async (req, res) => {
  try {
    const { prompt, tone = 'neutral', platform = 'generic', maxLength = 280 } = req.body || {};

    if (!prompt || !prompt.trim()) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
    if (!apiKey) {
      return res.status(500).json({
        error: 'Gemini API key is not configured. Set GEMINI_API_KEY in your environment.'
      });
    }

    // Compose an instruction to optimize for social media captions
    const systemInstruction = [
      'You are a social media assistant that writes concise, high-converting captions.',
      `Tone: ${tone}. Platform: ${platform}.`,
      'Rules:',
      '- Keep it under the provided character limit.',
      '- Prefer simple language and avoid hashtags unless essential.',
      '- Add 1-2 contextually relevant emojis if appropriate.',
      '- Include a subtle call-to-action when it makes sense.',
    ].join('\n');

    const composedPrompt = [
      systemInstruction,
      `Character limit: ${maxLength}.`,
      'Task: Write one caption for the following brief:',
      prompt,
    ].join('\n\n');

    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${encodeURIComponent(apiKey)}`;

    const { data } = await axios.post(url, {
      contents: [
        {
          role: 'user',
          parts: [{ text: composedPrompt }]
        }
      ],
      generationConfig: {
        temperature: 0.9,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 300
      }
    });

    const candidate = data?.candidates?.[0];
    const parts = candidate?.content?.parts || [];
    const generated = (parts.find(p => typeof p.text === 'string')?.text || '').trim();

    if (!generated) {
      return res.status(502).json({ error: 'No text generated by Gemini' });
    }

    // Return the text. Frontend may slice to platform limits.
    res.json({ text: generated });
  } catch (err) {
    const message = err?.response?.data?.error?.message || err?.message || 'Generation failed';
    res.status(500).json({ error: message });
  }
});

// Image generation is currently a placeholder. Replace with your preferred image model provider.
router.post('/generate-image', async (req, res) => {
  const { prompt } = req.body;
  res.json({ url: `https://placehold.co/1024x576?text=${encodeURIComponent(prompt || 'Generated')}` });
});

module.exports = router;


